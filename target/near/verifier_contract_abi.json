{
  "schema_version": "0.4.0",
  "metadata": {
    "name": "verifier-contract",
    "version": "0.1.0",
    "build": {
      "compiler": "rustc 1.73.0",
      "builder": "cargo-near 0.6.2"
    },
    "wasm_hash": "1FQqgZNhBp5nQPcrDRKPgiTPAdGhDgSf1Hjv8YPUTd6"
  },
  "body": {
    "functions": [
      {
        "name": "add_comment",
        "kind": "call",
        "params": {
          "serialization_type": "json",
          "args": [
            {
              "name": "account_id",
              "type_schema": {
                "$ref": "#/definitions/AccountId"
              }
            },
            {
              "name": "content",
              "type_schema": {
                "type": "string"
              }
            }
          ]
        }
      },
      {
        "name": "contract_source_metadata",
        "kind": "view"
      },
      {
        "name": "get_comments",
        "kind": "view",
        "params": {
          "serialization_type": "json",
          "args": [
            {
              "name": "account_id",
              "type_schema": {
                "$ref": "#/definitions/AccountId"
              }
            },
            {
              "name": "from_index",
              "type_schema": {
                "type": "integer",
                "format": "uint",
                "minimum": 0.0
              }
            },
            {
              "name": "limit",
              "type_schema": {
                "type": "integer",
                "format": "uint",
                "minimum": 0.0
              }
            }
          ]
        },
        "result": {
          "serialization_type": "json",
          "type_schema": {
            "type": "array",
            "items": [
              {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Comment"
                }
              },
              {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            ],
            "maxItems": 2,
            "minItems": 2
          }
        }
      },
      {
        "name": "get_contract",
        "kind": "view",
        "params": {
          "serialization_type": "json",
          "args": [
            {
              "name": "account_id",
              "type_schema": {
                "$ref": "#/definitions/AccountId"
              }
            }
          ]
        },
        "result": {
          "serialization_type": "json",
          "type_schema": {
            "anyOf": [
              {
                "$ref": "#/definitions/VerifiedContract"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      },
      {
        "name": "get_contracts",
        "kind": "view",
        "params": {
          "serialization_type": "json",
          "args": [
            {
              "name": "from_index",
              "type_schema": {
                "type": "integer",
                "format": "uint",
                "minimum": 0.0
              }
            },
            {
              "name": "limit",
              "type_schema": {
                "type": "integer",
                "format": "uint",
                "minimum": 0.0
              }
            }
          ]
        },
        "result": {
          "serialization_type": "json",
          "type_schema": {
            "type": "array",
            "items": [
              {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": [
                    {
                      "$ref": "#/definitions/AccountId"
                    },
                    {
                      "$ref": "#/definitions/VerifiedContract"
                    }
                  ],
                  "maxItems": 2,
                  "minItems": 2
                }
              },
              {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            ],
            "maxItems": 2,
            "minItems": 2
          }
        }
      },
      {
        "name": "get_owner",
        "kind": "view",
        "result": {
          "serialization_type": "json",
          "type_schema": {
            "$ref": "#/definitions/AccountId"
          }
        }
      },
      {
        "name": "new",
        "kind": "call",
        "modifiers": [
          "init"
        ]
      },
      {
        "name": "purge_contract",
        "kind": "call",
        "params": {
          "serialization_type": "json",
          "args": [
            {
              "name": "account_id",
              "type_schema": {
                "$ref": "#/definitions/AccountId"
              }
            }
          ]
        }
      },
      {
        "name": "search",
        "kind": "view",
        "params": {
          "serialization_type": "json",
          "args": [
            {
              "name": "key",
              "type_schema": {
                "type": "string"
              }
            },
            {
              "name": "from_index",
              "type_schema": {
                "type": "integer",
                "format": "uint",
                "minimum": 0.0
              }
            },
            {
              "name": "limit",
              "type_schema": {
                "type": "integer",
                "format": "uint",
                "minimum": 0.0
              }
            }
          ]
        },
        "result": {
          "serialization_type": "json",
          "type_schema": {
            "type": "array",
            "items": [
              {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": [
                    {
                      "$ref": "#/definitions/AccountId"
                    },
                    {
                      "$ref": "#/definitions/VerifiedContract"
                    }
                  ],
                  "maxItems": 2,
                  "minItems": 2
                }
              },
              {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            ],
            "maxItems": 2,
            "minItems": 2
          }
        }
      },
      {
        "name": "set_contract",
        "kind": "call",
        "params": {
          "serialization_type": "json",
          "args": [
            {
              "name": "account_id",
              "type_schema": {
                "$ref": "#/definitions/AccountId"
              }
            },
            {
              "name": "cid",
              "type_schema": {
                "type": "string"
              }
            },
            {
              "name": "code_hash",
              "type_schema": {
                "type": "string"
              }
            },
            {
              "name": "block_height",
              "type_schema": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            {
              "name": "lang",
              "type_schema": {
                "type": "string"
              }
            }
          ]
        }
      },
      {
        "name": "set_owner",
        "kind": "call",
        "params": {
          "serialization_type": "json",
          "args": [
            {
              "name": "owner_id",
              "type_schema": {
                "$ref": "#/definitions/AccountId"
              }
            }
          ]
        }
      },
      {
        "name": "vote_comment",
        "kind": "call",
        "params": {
          "serialization_type": "json",
          "args": [
            {
              "name": "comment_id",
              "type_schema": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            {
              "name": "is_upvote",
              "type_schema": {
                "type": "boolean"
              }
            }
          ]
        }
      },
      {
        "name": "vote_contract",
        "kind": "call",
        "params": {
          "serialization_type": "json",
          "args": [
            {
              "name": "account_id",
              "type_schema": {
                "$ref": "#/definitions/AccountId"
              }
            },
            {
              "name": "is_upvote",
              "type_schema": {
                "type": "boolean"
              }
            }
          ]
        }
      }
    ],
    "root_schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "String",
      "type": "string",
      "definitions": {
        "AccountId": {
          "description": "NEAR Account Identifier.\n\nThis is a unique, syntactically valid, human-readable account identifier on the NEAR network.\n\n[See the crate-level docs for information about validation.](index.html#account-id-rules)\n\nAlso see [Error kind precedence](AccountId#error-kind-precedence).\n\n## Examples\n\n``` use near_account_id::AccountId;\n\nlet alice: AccountId = \"alice.near\".parse().unwrap();\n\nassert!(\"ƒelicia.near\".parse::<AccountId>().is_err()); // (ƒ is not f) ```",
          "type": "string"
        },
        "Comment": {
          "type": "object",
          "required": [
            "author_id",
            "content",
            "id",
            "timestamp",
            "votes"
          ],
          "properties": {
            "author_id": {
              "$ref": "#/definitions/AccountId"
            },
            "content": {
              "type": "string"
            },
            "id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "timestamp": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "votes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Vote"
              },
              "uniqueItems": true
            }
          }
        },
        "VerifiedContract": {
          "type": "object",
          "required": [
            "block_height",
            "cid",
            "code_hash",
            "comments",
            "lang",
            "votes"
          ],
          "properties": {
            "block_height": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "cid": {
              "type": "string"
            },
            "code_hash": {
              "type": "string"
            },
            "comments": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "lang": {
              "type": "string"
            },
            "votes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Vote"
              },
              "uniqueItems": true
            }
          }
        },
        "Vote": {
          "type": "object",
          "required": [
            "author_id",
            "timestamp",
            "vote_type"
          ],
          "properties": {
            "author_id": {
              "$ref": "#/definitions/AccountId"
            },
            "timestamp": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "vote_type": {
              "$ref": "#/definitions/VoteType"
            }
          }
        },
        "VoteType": {
          "type": "string",
          "enum": [
            "Upvote",
            "Downvote"
          ]
        }
      }
    }
  }
}